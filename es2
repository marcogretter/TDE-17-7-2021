typedef struct nodo{
    int valore;
    struct nodo* next;
} nodo;
typedef nodo* lista;

lista InsInFondo(lista lis, int elem);
void VisualizzaLista(lista lis);
lista costruisci(void);
lista listapicchi(lista lis);

int main(){
    lista lis = costruisci();

    // TODO: visualizzazione lista input
    VisualizzaLista(lis);
    // TODO: invocazione funzione
    lis=listapicchi(lis);
    // TODO: visualizzazione lista output
    VisualizzaLista(lis);
    return 0;
}
lista listapicchi(lista lis)
{
    if(lis==NULL)
        return NULL;
    lista nuova=NULL;
    int tmpPrec=-1;
    while (lis->next!=NULL) {//l'ultimo valore non può essere un picco perché non ha un elemento successivo quindi lo escludo.
        if(lis->valore>lis->next->valore&&tmpPrec<lis->valore)
            nuova=InsInFondo(nuova, lis->valore);
        tmpPrec=lis->valore;
        lis=lis->next;
    }
    return nuova;
}
lista InsInFondo(lista lis, int elem) {
    lista punt;
    if(lis == NULL){
        punt = malloc(sizeof(nodo));
        punt->next   = NULL;
        punt->valore = elem;
        return punt;
    }
    else {
        lis->next = InsInFondo(lis->next, elem);
        return lis;
    }
}


void VisualizzaLista( lista lis ) {
    if ( lis == NULL )
        printf(" ---| \n");
    else {
        printf(" %d ---> ", lis->valore);
        VisualizzaLista( lis->next );
    }
}

lista costruisci(){
    // 1 -> 5 -> 16 -> 11 -> 12 -> 4 -> 5 -> 5 -> 3 -> 1 -> 5
    lista lis = NULL;
    lis = InsInFondo(lis, 1);
    lis = InsInFondo(lis, 5);
    lis = InsInFondo(lis, 16);
    lis = InsInFondo(lis, 11);
    lis = InsInFondo(lis, 12);
    lis = InsInFondo(lis, 4);
    lis = InsInFondo(lis, 5);
    lis = InsInFondo(lis, 5);
    lis = InsInFondo(lis, 3);
    lis = InsInFondo(lis, 1);
    lis = InsInFondo(lis, 5);

    return lis;
}
